#!/bin/bash
# .claude/commands/generate-prp
# Claude Code Project Requirements Planning (PRP) Generator
# Creates a comprehensive PRP file through interactive interview process

set -e

# Color codes for better UX
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to display colored output
print_header() {
    echo -e "\n${BLUE}╔══════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${NC}     ${CYAN}Claude Code PRP Generator${NC}           ${BLUE}║${NC}"
    echo -e "${BLUE}║${NC}  Project Requirements Planning Tool     ${BLUE}║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════════╝${NC}\n"
}

print_section() {
    echo -e "\n${YELLOW}━━━ $1 ━━━${NC}"
}

print_info() {
    echo -e "${CYAN}ℹ${NC} $1"
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

# Function to prompt for input with validation
prompt_input() {
    local prompt="$1"
    local var_name="$2"
    local required="${3:-true}"
    local validation="${4:-}"
    
    while true; do
        echo -e "${CYAN}?${NC} $prompt"
        if [ "$required" = "false" ]; then
            echo -e "  ${YELLOW}(Optional - press Enter to skip)${NC}"
        fi
        read -r input
        
        if [ -z "$input" ] && [ "$required" = "true" ]; then
            print_error "This field is required. Please provide a value."
            continue
        fi
        
        if [ -n "$validation" ] && [ -n "$input" ]; then
            if ! eval "$validation"; then
                print_error "Invalid input. Please try again."
                continue
            fi
        fi
        
        eval "$var_name='$input'"
        break
    done
}

# Function to prompt for multi-line input
prompt_multiline() {
    local prompt="$1"
    local var_name="$2"
    
    echo -e "${CYAN}?${NC} $prompt"
    echo -e "  ${YELLOW}(Enter multiple lines, type 'END' on a new line to finish)${NC}"
    
    local lines=""
    while IFS= read -r line; do
        if [ "$line" = "END" ]; then
            break
        fi
        if [ -n "$lines" ]; then
            lines="$lines\n$line"
        else
            lines="$line"
        fi
    done
    
    eval "$var_name='$lines'"
}

# Function to prompt for yes/no
prompt_yesno() {
    local prompt="$1"
    local var_name="$2"
    local default="${3:-n}"
    
    while true; do
        echo -e "${CYAN}?${NC} $prompt ${YELLOW}(y/n, default: $default)${NC}"
        read -r response
        
        if [ -z "$response" ]; then
            response="$default"
        fi
        
        case "$response" in
            [Yy]|[Yy][Ee][Ss])
                eval "$var_name=true"
                break
                ;;
            [Nn]|[Nn][Oo])
                eval "$var_name=false"
                break
                ;;
            *)
                print_error "Please answer yes (y) or no (n)."
                ;;
        esac
    done
}

# Function to select from options
prompt_select() {
    local prompt="$1"
    local var_name="$2"
    shift 2
    local options=("$@")
    
    echo -e "${CYAN}?${NC} $prompt"
    for i in "${!options[@]}"; do
        echo -e "  ${YELLOW}$((i+1)).${NC} ${options[i]}"
    done
    
    while true; do
        echo -e "  ${CYAN}Enter choice (1-${#options[@]}):${NC}"
        read -r choice
        
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#options[@]}" ]; then
            eval "$var_name='${options[$((choice-1))]}'"
            break
        else
            print_error "Invalid choice. Please enter a number between 1 and ${#options[@]}."
        fi
    done
}

# Main interview process
main() {
    print_header
    
    print_info "This tool will help you create a comprehensive Project Requirements Planning (PRP) document"
    print_info "that gives Claude Code the best possible context for your project."
    echo ""
    
    # Get current date
    current_date=$(date +"%Y-%m-%d")
    
    # Project Basic Information
    print_section "Project Overview"
    
    prompt_input "What is the name of your project/feature?" project_name
    prompt_input "Provide a brief description (1-2 sentences):" project_description
    prompt_select "What type of project is this?" project_type \
        "New Feature Development" \
        "Bug Fix/Maintenance" \
        "Refactoring/Technical Debt" \
        "Performance Optimization" \
        "Integration/API Development" \
        "UI/UX Improvement" \
        "Testing/Quality Assurance" \
        "Documentation" \
        "Other"
    
    if [ "$project_type" = "Other" ]; then
        prompt_input "Please specify the project type:" custom_project_type
        project_type="$custom_project_type"
    fi
    
    # Technical Context
    print_section "Technical Context"
    
    prompt_input "What is your primary technology stack? (e.g., React, Node.js, Python, etc.)" tech_stack
    prompt_input "What files/directories will this primarily affect?" affected_files
    prompt_yesno "Does this involve database changes?" db_changes
    prompt_yesno "Does this require API modifications?" api_changes
    prompt_yesno "Will this affect existing tests?" test_changes
    
    # Business Requirements
    print_section "Business Requirements"
    
    prompt_multiline "What problem are you trying to solve? Describe the current pain points:" problem_statement
    prompt_multiline "What is the desired outcome? How will success be measured?" success_criteria
    prompt_input "Who are the primary users/stakeholders affected?" target_users
    
    # Functional Requirements
    print_section "Functional Requirements"
    
    prompt_multiline "What specific functionality needs to be implemented? List the key features:" functional_requirements
    prompt_multiline "Are there any specific user interactions or workflows to consider?" user_workflows
    prompt_multiline "What are the input/output requirements?" input_output_specs
    
    # Technical Requirements
    print_section "Technical Requirements"
    
    prompt_yesno "Are there specific performance requirements?" has_performance_reqs
    if [ "$has_performance_reqs" = true ]; then
        prompt_input "Describe the performance requirements:" performance_requirements
    fi
    
    prompt_yesno "Are there security considerations?" has_security_reqs
    if [ "$has_security_reqs" = true ]; then
        prompt_input "Describe the security requirements:" security_requirements
    fi
    
    prompt_yesno "Are there scalability requirements?" has_scalability_reqs
    if [ "$has_scalability_reqs" = true ]; then
        prompt_input "Describe the scalability requirements:" scalability_requirements
    fi
    
    # Dependencies and Constraints
    print_section "Dependencies & Constraints"
    
    prompt_input "What external dependencies does this rely on? (libraries, APIs, services)" external_dependencies false
    prompt_input "What internal dependencies are there? (other features, services)" internal_dependencies false
    prompt_multiline "Are there any constraints or limitations to be aware of?" constraints
    
    # Implementation Guidance
    print_section "Implementation Guidance"
    
    prompt_select "What's your preferred development approach?" dev_approach \
        "Test-Driven Development (TDD)" \
        "Behavior-Driven Development (BDD)" \
        "Incremental Development" \
        "Prototype First" \
        "Documentation First" \
        "No Preference"
    
    prompt_multiline "Are there any specific coding standards, patterns, or conventions to follow?" coding_standards
    prompt_input "What testing strategy should be used?" testing_strategy false
    
    # Risk Assessment
    print_section "Risk Assessment"
    
    prompt_multiline "What are the potential risks or challenges?" risks
    prompt_multiline "Are there any areas where you're uncertain and need Claude's expertise?" uncertainty_areas
    
    # Additional Context
    print_section "Additional Context"
    
    prompt_multiline "Is there any additional context, background, or special considerations?" additional_context
    prompt_input "Are there any reference materials, documentation, or examples to consider?" reference_materials false
    
    # Generate the PRP file
    print_section "Generating PRP File"
    
    prp_filename="${project_name// /_}_PRP_${current_date}.md"
    prp_filename=$(echo "$prp_filename" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9._-]//g')
    
    print_info "Creating PRP file: $prp_filename"
    
    # Create the PRP document
    cat > "$prp_filename" << EOF
# Project Requirements Planning (PRP)

## Project Information
- **Project Name:** $project_name
- **Date Created:** $current_date
- **Project Type:** $project_type
- **Primary Technology Stack:** $tech_stack

## Executive Summary
$project_description

## Problem Statement
$problem_statement

## Success Criteria
$success_criteria

## Target Users/Stakeholders
$target_users

## Technical Context
- **Affected Files/Directories:** $affected_files
- **Database Changes Required:** $([ "$db_changes" = true ] && echo "Yes" || echo "No")
- **API Modifications Required:** $([ "$api_changes" = true ] && echo "Yes" || echo "No")
- **Test Updates Required:** $([ "$test_changes" = true ] && echo "Yes" || echo "No")

## Functional Requirements
### Core Functionality
$functional_requirements

### User Workflows
$user_workflows

### Input/Output Specifications
$input_output_specs

## Technical Requirements
EOF

    if [ "$has_performance_reqs" = true ]; then
        cat >> "$prp_filename" << EOF
### Performance Requirements
$performance_requirements
EOF
    fi

    if [ "$has_security_reqs" = true ]; then
        cat >> "$prp_filename" << EOF
### Security Requirements
$security_requirements
EOF
    fi

    if [ "$has_scalability_reqs" = true ]; then
        cat >> "$prp_filename" << EOF
### Scalability Requirements
$scalability_requirements
EOF
    fi

    cat >> "$prp_filename" << EOF

## Dependencies
### External Dependencies
$([ -n "$external_dependencies" ] && echo "$external_dependencies" || echo "_None specified_")

### Internal Dependencies
$([ -n "$internal_dependencies" ] && echo "$internal_dependencies" || echo "_None specified_")

## Constraints and Limitations
$constraints

## Implementation Approach
- **Preferred Development Approach:** $dev_approach
$([ -n "$testing_strategy" ] && echo "- **Testing Strategy:** $testing_strategy")

### Coding Standards and Conventions
$coding_standards

## Risk Assessment
### Potential Risks and Challenges
$risks

### Areas of Uncertainty
$uncertainty_areas

## Additional Context
$additional_context

$([ -n "$reference_materials" ] && echo "## Reference Materials
$reference_materials")

## Implementation Checklist
- [ ] Review and validate all requirements
- [ ] Set up development environment
- [ ] Create/update project structure
- [ ] Implement core functionality
- [ ] Add comprehensive tests
- [ ] Update documentation
- [ ] Perform code review
- [ ] Test in staging environment
- [ ] Deploy to production

## Notes for Claude Code
This PRP document is designed to provide comprehensive context for Claude Code development. Please:

1. **Analyze the requirements thoroughly** before starting implementation
2. **Ask clarifying questions** if any requirements are ambiguous
3. **Follow the specified development approach** and coding standards
4. **Consider the risks and constraints** during implementation
5. **Implement comprehensive testing** as specified
6. **Document your implementation decisions** and rationale

---

*Generated by Claude Code PRP Generator on $current_date*
EOF

    print_success "PRP file created successfully: $prp_filename"
    
    # Offer to open the file
    prompt_yesno "Would you like to view the generated PRP file?" view_file
    if [ "$view_file" = true ]; then
        if command -v cat > /dev/null; then
            echo -e "\n${YELLOW}━━━ PRP File Contents ━━━${NC}"
            cat "$prp_filename"
        fi
    fi
    
    print_info "You can now use this PRP file with Claude Code by referencing it in your conversations."
    print_info "Example: 'Based on the PRP file $prp_filename, please implement the core functionality.'"
    
    # Offer to create a CLAUDE.md entry
    prompt_yesno "Would you like to add this PRP to your CLAUDE.md file?" update_claude_md
    if [ "$update_claude_md" = true ]; then
        claude_md_entry="
## Current PRP: $project_name
- **File:** $prp_filename
- **Created:** $current_date
- **Type:** $project_type
- **Status:** In Progress

Please refer to the PRP file for detailed requirements and context.
"
        
        if [ -f "CLAUDE.md" ]; then
            echo "$claude_md_entry" >> CLAUDE.md
            print_success "Added PRP reference to CLAUDE.md"
        else
            cat > CLAUDE.md << EOF
# Claude Code Project Context

This file provides context and guidance for Claude Code development on this project.

$claude_md_entry
EOF
            print_success "Created CLAUDE.md with PRP reference"
        fi
    fi
    
    echo ""
    print_success "PRP generation complete! Happy coding with Claude!"
}

# Check if help was requested
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    print_header
    echo "Usage: /generate-prp"
    echo ""
    echo "This interactive command creates a comprehensive Project Requirements Planning (PRP)"
    echo "document through a guided interview process. The PRP provides Claude Code with"
    echo "detailed context about your project requirements, constraints, and objectives."
    echo ""
    echo "Features:"
    echo "  • Interactive requirement gathering"
    echo "  • Comprehensive technical and business context"
    echo "  • Risk assessment and implementation guidance"
    echo "  • Automatic CLAUDE.md integration"
    echo "  • Structured format optimized for Claude Code"
    echo ""
    echo "The generated PRP file can be referenced in your Claude Code conversations"
    echo "to provide comprehensive project context."
    exit 0
fi

# Run the main function
main
