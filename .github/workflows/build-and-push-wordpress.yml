name: Build and Push WordPress and Pipeline Images

on:
  push:
    branches:
      - main # Or your primary branch
      - troubleshooting # Enable development branch builds
    paths:
      - 'docker/wordpress/Dockerfile'
      - 'docker/wordpress/wp-entrypoint.sh'
      - 'docker/wordpress/plugins/**'
      - 'pipelines/**'
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: wp-openwebui.cr.de-fra.ionos.com
          username: ${{ secrets.CR_USERNAME }}
          password: ${{ secrets.CR_PASSWORD }}

      - name: Build and Push WordPress Image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/wordpress
          push: true
          tags: wp-openwebui.cr.de-fra.ionos.com/jubalm/ionos/poc/wordpress:latest,wp-openwebui.cr.de-fra.ionos.com/jubalm/ionos/poc/wordpress:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Pipeline Service Image
        uses: docker/build-push-action@v5
        with:
          context: ./pipelines
          push: true
          tags: wp-openwebui.cr.de-fra.ionos.com/jubalm/ionos/poc/wordpress-oauth-pipeline:latest,wp-openwebui.cr.de-fra.ionos.com/jubalm/ionos/poc/wordpress-oauth-pipeline:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-pipeline:
    name: Deploy Pipeline Service
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Get kubeconfig
        env:
          IONOS_TOKEN: ${{ secrets.IONOS_TOKEN }}
        run: |
          # This workflow should not download kubeconfig directly
          # Remove this step or use ionosctl for dynamic cluster discovery
          echo "Cluster configuration should be obtained from deployment workflow"

      - name: Update pipeline service ConfigMap
        run: |
          export KUBECONFIG=./kubeconfig.yaml
          kubectl delete configmap pipeline-code -n admin-apps --ignore-not-found
          kubectl create configmap pipeline-code --from-file=pipelines/ -n admin-apps

      - name: Update pipeline service deployment
        run: |
          export KUBECONFIG=./kubeconfig.yaml
          kubectl patch deployment wordpress-oauth-pipeline -n admin-apps \
            --patch='{"spec":{"template":{"spec":{"containers":[{"name":"wordpress-oauth-pipeline","image":"wp-openwebui.cr.de-fra.ionos.com/jubalm/ionos/poc/wordpress-oauth-pipeline:${{ github.sha }}"}]}}}}'

      - name: Wait for deployment rollout
        run: |
          export KUBECONFIG=./kubeconfig.yaml
          kubectl rollout status deployment/wordpress-oauth-pipeline -n admin-apps --timeout=300s

      - name: Verify deployment health
        run: |
          export KUBECONFIG=./kubeconfig.yaml
          kubectl wait --for=condition=available deployment/wordpress-oauth-pipeline -n admin-apps --timeout=300s
          
          # Test health endpoint
          kubectl port-forward -n admin-apps svc/wordpress-oauth-pipeline 9099:9099 &
          PORT_FORWARD_PID=$!
          sleep 5
          
          HEALTH_STATUS=$(curl -s http://localhost:9099/health | jq -r '.status')
          kill $PORT_FORWARD_PID || true
          
          if [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "❌ Pipeline service health check failed after deployment"
            exit 1
          fi
          
          echo "✅ Pipeline service deployed successfully and is healthy"
